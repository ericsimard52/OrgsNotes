
* Intro
  https://orgmode.org
  Org mode bring life to plain text. Very powerfull and effective system.
  
** Features
   - Editing
     Org is built on top of outline.el. This is what allows for Heading, folding and unfolding.
   - Planning
     Org can help you plan with good handling of Todo's item, handling of deadline, schedule date and time.
   - Clocking
     Record time spent on task and get reports when needed.
   - Agenda
     With the Agenda view, quickly view and focus on what needs to be done.
     The agenda view display the schedule for the task of the week, todo's, project and more.
     The agenda is very customizable
   - Capturing
     Adding TODO items to your .org files is called capturing.
     You can capture from everywhere both within Emacs and from other programs.
     Capturing templates allow you to decide what information you want to capture from a given context.
   - Tables
     Org can manage and create tables.
     You can import tables from .cdv .tsv.
     You can also export them in multiple format
   - Exporting
     Org is an authoring and publication tool.
     You can use markup and then have it converted to HTML, Lates, ODT and more.
     You can create new backend for your favorite format. (Programming require)
     You can alse define publishing projects with one or more .org files.
     And with more then 1 publication backends
   - Working with source code.
     Org is very well suited for literate programming.
     https://en.wikipedia.org/wiki/Literate_programming
     When working with source code, you can create code block within your text file.
     These blocks can be evaluated infile. One or multiple source block can be exported to file.
     With literate programming, your source code is embeded in your documentation.
   - Want access to your org files on the go? There is an APP for that, seriously, MobileOrg

* Document Structure.
** Headlines
   You have already seen and used headlines. Headlines start with one or more * on the left margin.
   Subheaders contains more stars then the parent header.
   All subheaders fold with the parent header
   And empty line after the end of a subtree will be part of it. Additional empty line will be left out.

   To create a heading, press C-<RETURN> this will insert a new heading below the last one.
   This new heading will have the same level. Without moving the cursor press tab to move new heading to a new level.
   Press TAB multiple time to cycle this new heading's level.
** Visibility cycling
*** Global & local
    Visibility cycling is bound to <TAB> and S-<TAB> (S refers to the SHIFT key.)
    <TAB> cycles visibility of "object" under the cursor. Be it a header, source ccode, drawers and many others.

    S-<TAB> & C-u <TAB> controls the global cycling. Global cycling rotate the entire buffer.
    Note that inside tables, S-<TAB> jumps to the previous field.
    You can run global cycling using <TAB> only when at the very beginning og the buffer AND not on a headline AND org-cycle-global-at-bob is set to non-nil value.

    C-u C-u <TAB> Switches visibility back to initial state.
    C-u C-u C-u <TAB> Shows all.

*** Initial visibility
    When org mode starts, the global state is set to OVERVIEW. Only top level headers are visible.
    This can be set through the variable org-startup-folded or on a per-file with the following lines anywhere in the buffer.
    #+STARTUP: content
    #+STARTUP: showall
    #+STARTUP: showeverything
    #+STARTUP: overview
    :NOTE:
    I have place overview last so that this will be the initial state of this file.
    :END:
    Also, any entries with a visibility property will get their visibility set accordingly.
    Allowed value for this property:
    - folded
    - children
    - content
    - all

    To switch back to startup visibility of the current buffer:
    C-u C-u <TAB>
*** Catching invisible edits
    Sometimes you will endup editing an invisible part of your file.
    It can become confusing on what was changed and how to fix it.
    Setting org-catch-invisible-edits to non-nil will help with this.
    Let's look at the docstring for more info:
    To do this, enter the following command:
    M-x describe-variable <RET> org-catch-invisible-edits <RET>
    A new buffer will open with the desired docstring. Look through it.
    If wanted, change the variable:
    M-x set-variable <RET> org-catch-invisible-edits <RET> {nil,error,show,show-and-error,smart}
    Press C-x 1 when done with the docstring. This will remove the split.
* Tables
** Creating tables manually
  Org can manage tables, Spreadsheet like calcualtion are supported using the Emacs Calc package.
  Any line with | as the first non-whitespace character is considered part of a table. | is also the column separator.
  Simple table looks likes:
  | NAME  | Phone | Age |
  |-------+-------+-----|
  | Peter |  1234 | 47  |
  |       |       |     |

  Let's do one together:
  #+NAME: TableExample
  #+BEGIN_EXAMPLE 
  
  #+END_EXAMPLE

  Table is realigned everytime you press <TAB> or C-c C-c while inside the table.
  <TAB> Will move you to the next field. <RET> To the next row. S-<TAB> To the previous field.
  Org threat Backspace and maybe DEL in a special way so that the table does not get distorted by deleting data.
  Also if you type right after entering a field with <TAB>, S-<TAB> or <RET> The field will be overwriten (Set blank when you start typing)
  If this behavior is not to your liking, change it by configuring org-table-auto-blank-field
** Converting active region to table
   To convert an active region, press C-c |
   If every line has at least one <TAB> character, it will be assumed to be tab delimited.
   If every line contains a comma, CSV is assumed.
   If not, lines are split at whitespace.
   You can use a prefix to force a separator:
   C-u forces CSV, C-u C-u forces TAB
   C-u C-u C-u will prompt for a regular expression to match the separator.
   If no active region is selected, a new table will be created.

   #+BEGIN_EXAMPLE
     Select the following 3 lines and press C-c |

     Name,email,Phone
     Eric,notmyemail@gmail.com,123456
     Nicole,notheremail@gmail.com,589543


     Same content, using tab

     Name  email Phone
     Eric  notmyemail@gmail.com  123456
     Nicole  notheremail@gmail.com  589543


     Same content, using space

     Name email Phone
     Eric notmyemail@gmail.com 123456
     Nicole notheremail@gmail.com 589543



     In the next example, press C-u C-u C-u C-c | and provide ; has a separator
     Name;email;Phone
     Eric;notmyemail@gmail.com;123456
     Nicole;notheremail@gmail.com;589543


   #+END_EXAMPLE
** Moving through a table and aligning
   Org provide multiple keybinding to facilitates these tasks:
   - C-c C-c (org-table-align)
     Re-align the table and don't move the cursor.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - C-c <SPC> (or-table-blank-field)
     Blank field at point (cursor)
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | data 3 |
     :END:
   - <TAB> (org-table-next-field)
     Re-align the table, move to next field, create new row if needed.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | !Come here and press <TAB>! |
     :END:
   - S-<TAB> (org-table-previous-field)
     Re-align table, move to previous field
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | !Come here and press S-<TAB>! |
     :END:
   - <RET> (org-table-next-row)
     Re-align the table and move down to next row, create a new one if needed.
     At the beggining or end of the line, <RET> still does NEWLINE, so you can use it to split a table.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | data 3 |
     :END:
   - M-a (org-table-beginning-of-field)
     Move to the beginning of the current field or on to the previous one.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | data 3 |
     :END:   
   - M-e (org-table-end-of-field)
     Move to the end of the current field or to the next field.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     | data 1 | data 2 | data 3 |
     :END:
** Column and row editing
   - M-<LEFT> (org-table-move-column-left)
     M-<RIGHT> (org-table-move-column-right)
     Move the current column
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - M-S-<LEFT> (org-table-delete-column)
     Delete the current column
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - M-S-<RIGHT> (org-table-insert-column)
     Insert a new column to the left of the cursor
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - M-<UP> (org-table-move-row-up)
   - M-<DOWN> (org-table-move-row-down)
     Move the current row up or down
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - M-S-<UP> (org-table-kill-row)
     Kill the current row or horizontal line.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - M-S-<DOWN> (org-table-insert-row)
     Insert a new row above the current row
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - C-c - (org-table-insert-hline)
     Insert a horizontal line below the current row.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - C-c <RET> (org-table-hline-and-move)
     Insert a horizontal line below the current row and move cursor into the row below that line.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     :END:
   - C-c ^ (org-table-sort-lines)
** Copy/Cut & Paste
   - C-c C-x M-w (org-table-copy-region)
     Copy a rectangular region from a table to a special clipboard. Point & mark defines the edge fields.
     If there is no active region, the current field is copied
     There is no clue that the copy works until you attempt to paste it.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     | D2     | D3           | D5     |
     | D3     | D4           | D4     |
     | D4     | D5           | D3     |
     | D5     | D6           | D2     |
     | D6     | D7           | D1     |
     :END:
   - C-c C-x C-w (org-table-cut-region
     Same as above, but cut instead of copy.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     | Data 1 | Data 2dsadda | Data 3 |
     | D2     | D3           | D5     |
     | D3     | D4           | D4     |
     | D4     | D5           | D3     |
     | D5     | D6           | D2     |
     | D6     | D7           | D1     |
     :END:
   - C-c C-x C-y (org-table-paste-rectangle
     Paste into a table. A table frame has to be present. All involved fields will be overwriten.
     If you have copied or cut in the above example, you can attempt to paste in the following tables.
     Note that if the table is not big enough, it will be resized.
     :TRYME:
     | FIELD1 | FIELD2       | FIELD3 |
     |        |              |        |
     :END:
** Calculations
   - C-c + (org-table-sum)
     Sum the numbers in the current column, or in the rectangle defined by an active region.
     The results are show in the echo area and can be inserted with C-y
     :TRYME:
     | FIELD1 |       FIELD2 | FIELD3 |
     |      1 | Data 2dsadda | Data 3 |
     |      2 |            3 | D5     |
     |      3 |            4 | D4     |
     |      4 |            5 | D3     |
     |      5 |            6 | D2     |
     |      6 |            7 | D1     |
     |        |              |        |

     :END:

   - S-<RET> (org-table-copy-down)
     When the current field is empty, copy from first non-empty field above.
     When not empty, copy current field down to next row and move cursor along.
     Depending on org-table-copy-increment, integer fields will be incremented during copy. Integers that are too large will not be.
     Play around below to see different behavior.
     :TRYME:
     | FIELD1 | FIELD2 | FIELD3 |
     |      1 |        | Data 3 |
     |      2 |      3 | D5     |
     |      3 |      4 | D4     |
     |      4 |      5 | D3     |
     |      5 |      6 | D2     |
     |      6 |      7 | D1     |
     :END:
** Other keybinding
   - C-c ` (org-table-edit-field)
     Edit current field in a new buffer. This is useful when the field is not fully visible.
   - C-u Cc `
     Same as above, but edit field in place, making it all visible.
     :TRYME:
     Column and alignment will be visited later. But you can see below I have made the 2nd column too short to allow you to practice now.
     | FIELD1 | FIELD2 | FIELD3 |
     | Data 1 | <4>  | Data 3 |
     | D2     | This is too long to be fully visible | D5     |
     | D3     | D4   | D4     |
     | D4     | D5   | D3     |
     | D5     | D6   | D2     |
     | D6     | D7   | D1     |
     
    :END:
   - M-x org-table-import <RET> ## This is a command that needs to be typed.
     Import a file as a table. File should be TAB or whitespace separated.
   - C-c | (org-table-create-or-convert-from-region)
     This will convert an active region to a table. This was seen in a previous header.
   - M-x org-table-export <RET>
     Export the table as a TAB separated file.
     Format can be configured in the option org-table-export-default-format.
     Properties (We will see this later) TABLE_EXPORT_FILE & TABLE_EXPORT_FORMAT can be used to specify the file name and format.
** Column width and alignment.
   Org, automatically adjust column size, but sometime you want to specify yourself a width for any given column
   To do so, 1 field anywhere in a column that contains only <N>, N being the width of the column in character.
   In this case, when the content is biger then the field, is will have => at the end
   :TRYME:
     You have a row that I have reserved to set column width, practice.
     | FIELD1      | FIELD2    | FIELD3            |
     |-------------+-----------+-------------------|
     |             |           |                   |
     | D2dsasadsad | D3        | D5                |
     | D3          | D4dsadsad | D4                |
     | D4          | D5        | dsadsadsadsadasD3 |
     | D5          | D6        | D2                |
     | D6          | D7        | D1                |
    :END:

   When you open a file with tables containing narrowed column, the character hiding has not yet happen and the table needs to be aligned before it looks good.
   Setting the option org-startup-align-all-tables will to that automatically everytime for everyfile, but can slowdown startup.
   You can specify this option on a per-file basis, which is prefered.
   #+STARTUP: align
   #+STARTUP: noalign
** The spreadsheet
   The table editor uses Emacs calc package to implement spreadsheet like capabilities.
   While full featured, Org's spreadsheet is not identical to other spreadsheet.
   Org knows the concept of a column formula that will be applied to all non-header fields in a column with having to copy it.
   There is also a formula debugger and a formula editor. This editor can highlight fields in the table.

*** References
    To compute fields in the table from other fields formulas uses reference. Org fields can be referenced by name, absolute coordinates or relative coord.
    To find the coord of a field, press C-c ? in that field.
    You can also press C-c } to toggle the grid display.

**** Field references
     You can reference the value of another field in 2 ways.
     1 - Like any other spreadsheet, you canuse Letter/Numbers combination
